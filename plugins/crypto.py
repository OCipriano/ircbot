# ================================================================================ #
#                                                                                  #
# Ficheiro:      crypto.py                                                         #
# Autor:         NunchuckCoder                                                     #
# Vers√£o:        1.0                                                               #
# Data:          Julho 2025                                                        #
# Descri√ß√£o:     M√≥dulo para consulta de pre√ßos de criptomoedas em tempo real,     #
#                utilizando a API p√∫blica da Binance. D√° suporte a pares EUR e     #
#                USD (via USDT). Retorna mensagens formatadas para o bot IRC.      #
# Licen√ßa:       MIT License                                                       #
#                                                                                  #
# ================================================================================ #

import aiohttp     # Biblioteca ass√≠ncrona para requests HTTP
import asyncio     # Usada para gest√£o de timeouts e exce√ß√µes ass√≠ncronas

# Fun√ß√£o ass√≠ncrona para obter o pre√ßo de uma criptomoeda
# symbol -> ticker da moeda (ex: BTC, ETH)
async def get_crypto_price(symbol):
    try:
        async with aiohttp.ClientSession() as session:
            # Primeiro tenta obter o pre√ßo no par com EUR
            url_price_eur = f"https://api.binance.com/api/v3/ticker/price?symbol={symbol.upper()}EUR"
            async with session.get(url_price_eur, timeout=10) as res:
                data = await res.json()
                if 'price' in data:
                    return f"üí∂ {symbol.upper()}: {float(data['price']):.8f} EUR"

            # Se n√£o existir par em EUR, tenta no par USDT (equivalente a USD)
            url_price_usd = f"https://api.binance.com/api/v3/ticker/price?symbol={symbol.upper()}USDT"
            async with session.get(url_price_usd, timeout=10) as res:
                data = await res.json()
                if 'price' in data:
                    return f"üí≤ {symbol.upper()}: {float(data['price']):.8f} USD"

            # Se nenhum dos pares for encontrado, devolve aviso
            return f"‚ö†Ô∏è Moeda '{symbol.upper()}' n√£o encontrada."

    # --- Tratamento de erros espec√≠ficos ---
    except asyncio.TimeoutError:
        return "‚è≥ Timeout ao contactar a Binance. Tente novamente mais tarde."
    except aiohttp.ClientError:
        return "‚ùå Erro de rede ao tentar contactar a Binance."
    except Exception as e:
        # Captura qualquer erro inesperado (ex.: resposta inv√°lida)
        return f"‚ö†Ô∏è Ocorreu um erro: {e}"
